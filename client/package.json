{
  "name": "m68k-lsp-client",
  "description": "VSCode client for m68k language server",
  "author": "Graham Bates",
  "license": "MIT",
  "version": "0.5.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/grahambates/m68k-lsp"
  },
  "engines": {
    "vscode": "^1.52.0"
  },
  "categories": [],
  "keywords": [
    "multi-root ready"
  ],
  "activationEvents": [
    "onLanguage:vasmmot",
    "onLanguage:m68k"
  ],
  "main": "./out/extension",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "M68k",
      "properties": {
        "m68k.format.align.mnemonic": {
          "type": "number",
          "default": 12,
          "minium": 0,
          "maximum": 120,
          "description": "Indent position of instruction/directive element"
        },
        "m68k.format.align.operands": {
          "type": "number",
          "default": 22,
          "minium": 0,
          "maximum": 120,
          "description": "Indent position of operands element"
        },
        "m68k.format.align.comment": {
          "type": "number",
          "default": 48,
          "minium": 0,
          "maximum": 120,
          "description": "Indent position of comment element"
        },
        "m68k.format.align.operator": {
          "type": "number",
          "default": 0,
          "minium": 0,
          "maximum": 120,
          "description": "Indent position of '=' for constant"
        },
        "m68k.format.align.value": {
          "type": "number",
          "default": 0,
          "minium": 0,
          "maximum": 120,
          "description": "Indent position of value for constant assignment"
        },
        "m68k.format.align.indentStyle": {
          "type": "string",
          "enum": [
            "space",
            "tab"
          ],
          "default": "space",
          "description": "Indent character"
        },
        "m68k.format.align.autoExtend": {
          "type": "string",
          "enum": [
            "line",
            "block",
            "file"
          ],
          "default": "line",
          "description": "Behaviour when a component exceeds the available space between positions."
        },
        "m68k.format.case.instruction": {
          "type": "string",
          "enum": [
            "upper",
            "lower",
            "any"
          ],
          "default": "lower",
          "description": "Instruction mnemonic case"
        },
        "m68k.format.case.directive": {
          "type": "string",
          "enum": [
            "upper",
            "lower",
            "any"
          ],
          "default": "lower",
          "description": "Directive mnemonic case"
        },
        "m68k.format.case.control": {
          "type": "string",
          "enum": [
            "upper",
            "lower",
            "any"
          ],
          "default": "lower",
          "markdownDescription": "Control mnemonic case (e.g. `IFEQ`/`ENDC`, `REPT`/`ENDR`)"
        },
        "m68k.format.case.register": {
          "type": "string",
          "enum": [
            "upper",
            "lower",
            "any"
          ],
          "default": "lower",
          "description": "Register case"
        },
        "m68k.format.case.sectionType": {
          "type": "string",
          "enum": [
            "upper",
            "lower",
            "any"
          ],
          "default": "lower",
          "markdownDescription": "Section type case (e.g. `BSS`)"
        },
        "m68k.format.case.hex": {
          "type": "string",
          "enum": [
            "upper",
            "lower",
            "any"
          ],
          "default": "lower",
          "markdownDescription": "Hexadecimal number literals"
        },
        "m68k.format.quotes": {
          "type": "string",
          "enum": [
            "any",
            "single",
            "double"
          ],
          "default": "any",
          "description": "Quote style for strings"
        },
        "m68k.format.labelColon.global": {
          "type": "string",
          "enum": [
            "on",
            "off",
            "notInline",
            "onlyInline",
            "any"
          ],
          "default": "any",
          "markdownDescription": "Include colon suffix for global labels (e.g. `MyLabel:`)"
        },
        "m68k.format.labelColon.local": {
          "type": "string",
          "enum": [
            "on",
            "off",
            "notInline",
            "onlyInline",
            "any"
          ],
          "default": "any",
          "markdownDescription": "Include colon suffix for local labels (e.g. `.MyLabel`)"
        },
        "m68k.format.operandSpace": {
          "type": "string",
          "enum": [
            "on",
            "off",
            "any"
          ],
          "default": "off",
          "markdownDescription": "Include space between operands? VASM needs `-spaces` or `-phxass` option to support this."
        },
        "m68k.includePaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional paths to resolve includes"
        },
        "m68k.processors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "mc68000",
              "mc68010",
              "mc68020",
              "mc68030",
              "mc68040",
              "mc68060",
              "mc68881",
              "mc68851",
              "cpu32"
            ]
          },
          "default": [
            "mc68000"
          ],
          "description": "Additional paths to resolve includes"
        },
        "m68k.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        }
      }
    }
  },
  "dependencies": {
    "m68k-lsp-server": "^0.1.0",
    "vscode-languageclient": "^7.0.0"
  },
  "devDependencies": {
    "@types/vscode": "^1.52.0"
  },
  "extensionDependencies": [
    "clcxce.motorola-68k-assembly"
  ]
}
